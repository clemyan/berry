import {expect, test} from '@playwright/test';

const routes = [
  {path: `/blog`},
  {path: `/blog/archive`},
  {path: `/blog/bun`},
  {path: `/blog/release/2.0`},
  {path: `/blog/release/2.1`},
  {path: `/blog/release/2.2`},
  {path: `/blog/release/2.3`},
  {path: `/blog/release/2.4`},
  {path: `/blog/release/3.0`},
  {path: `/blog/release/3.1`},
  {path: `/blog/release/3.2`},
  {path: `/blog/release/4.0`},
  {path: `/configuration`},
  {path: `/docs/search`},
  {path: `/search`},
  {path: `/package?q=&name=clipanion&file=%2Fpackage.json`},
  {path: `/package?q=&name=clipanion`},
  {path: `/cli`},
  {path: `/cli/add`},
  {path: `/cli/bin`},
  {path: `/cli/builder`},
  {path: `/cli/builder/build/bundle`},
  {path: `/cli/builder/build/plugin`},
  {path: `/cli/builder/new/plugin`},
  {path: `/cli/cache/clean`},
  {path: `/cli/config`},
  {path: `/cli/config/get`},
  {path: `/cli/config/set`},
  {path: `/cli/config/unset`},
  {path: `/cli/constraints`},
  {path: `/cli/constraints/query`},
  {path: `/cli/constraints/source`},
  {path: `/cli/dedupe`},
  {path: `/cli/dlx`},
  {path: `/cli/exec`},
  {path: `/cli/explain`},
  {path: `/cli/explain/peer-requirements`},
  {path: `/cli/info`},
  {path: `/cli/init`},
  {path: `/cli/install`},
  {path: `/cli/link`},
  {path: `/cli/node`},
  {path: `/cli/npm/audit`},
  {path: `/cli/npm/info`},
  {path: `/cli/npm/login`},
  {path: `/cli/npm/logout`},
  {path: `/cli/npm/publish`},
  {path: `/cli/npm/tag/add`},
  {path: `/cli/npm/tag/list`},
  {path: `/cli/npm/tag/remove`},
  {path: `/cli/npm/whoami`},
  {path: `/cli/pack`},
  {path: `/cli/patch`},
  {path: `/cli/patch-commit`},
  {path: `/cli/plugin/check`},
  {path: `/cli/plugin/import`},
  {path: `/cli/plugin/import/from/sources`},
  {path: `/cli/plugin/list`},
  {path: `/cli/plugin/remove`},
  {path: `/cli/plugin/runtime`},
  {path: `/cli/pnpify`},
  {path: `/cli/pnpify/run`},
  {path: `/cli/rebuild`},
  {path: `/cli/remove`},
  {path: `/cli/run`},
  {path: `/cli/sdks`},
  {path: `/cli/sdks/default`},
  {path: `/cli/search`},
  {path: `/cli/set/resolution`},
  {path: `/cli/set/version`},
  {path: `/cli/set/version/from/sources`},
  {path: `/cli/stage`},
  {path: `/cli/unlink`},
  {path: `/cli/unplug`},
  {path: `/cli/up`},
  {path: `/cli/upgrade-interactive`},
  {path: `/cli/version`},
  {path: `/cli/version/apply`},
  {path: `/cli/version/check`},
  {path: `/cli/why`},
  {path: `/cli/workspace`},
  {path: `/cli/workspaces/focus`},
  {path: `/cli/workspaces/foreach`},
  {path: `/cli/workspaces/list`},
  {path: `/advanced/architecture`},
  {path: `/advanced/changelog`},
  {path: `/advanced/contributing`},
  {path: `/advanced/error-codes`},
  {path: `/advanced/lexicon`},
  {path: `/advanced/lifecycle-scripts`},
  {path: `/advanced/plugin-tutorial`},
  {path: `/advanced/pnp-spec`},
  {path: `/advanced/pnpapi`},
  {path: `/advanced/pnpify`},
  {path: `/advanced/rulebook`},
  {path: `/advanced/telemetry`},
  {path: `/configuration/manifest`},
  {path: `/configuration/yarnrc`},
  {path: `/corepack`},
  {path: `/features/caching`},
  {path: `/features/constraints`},
  {path: `/features/extensibility`},
  {path: `/features/linkers`},
  {path: `/features/patching`},
  {path: `/features/performances`},
  {path: `/features/pnp`},
  {path: `/features/release-workflow`},
  {path: `/features/scripting`},
  {path: `/features/security`},
  {path: `/features/workspaces`},
  {path: `/getting-started`},
  {path: `/getting-started/editor-sdks`},
  {path: `/getting-started/install`},
  {path: `/getting-started/qa`},
  {path: `/getting-started/recipes`},
  {path: `/getting-started/usage`},
  {path: `/migration/guide`},
  {path: `/migration/overview`},
  {path: `/migration/pnp`},
  {path: `/protocol/exec`},
  {path: `/protocol/file`},
  {path: `/protocol/git`},
  {path: `/protocol/jsr`},
  {path: `/protocol/link`},
  {path: `/protocol/npm`},
  {path: `/protocol/patch`},
  {path: `/protocol/portal`},
  {path: `/protocol/workspace`},
  {path: `/protocols`},
];

test.describe(`Docusaurus site screenshots`, async () => {
  for (const {path} of routes) {
    test(`pathname ${path}`, async ({page}) => {
      await page.goto(path);
      await page.addStyleTag({content: `html { background-color: black !important; }`});
      await page.waitForLoadState(`load`);
      await page.waitForSelector(`[aria-busy="true"]`, {state: `detached`});
      await expect(page).toHaveScreenshot(`${path.replaceAll(/^\/|\/$/g, ``) || `index`}.png`, {
        fullPage: true,
        timeout: 5 * 60 * 1000,
      });
    });
  }
});
